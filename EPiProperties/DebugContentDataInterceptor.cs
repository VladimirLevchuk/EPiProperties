using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using Castle.DynamicProxy;
using EPiProperties.Util;
using EPiServer.Core;
using EPiServer.DataAbstraction.RuntimeModel;
using EPiServer.Framework;
using EPiServer.ServiceLocation;

namespace EPiProperties
{
    public class DebugContentDataInterceptor : ContentDataInterceptor
    {
        private readonly ContentDataInterceptorHandler _contentDataInterceptorHandler;
        
        public DebugContentDataInterceptor() : this(ServiceLocator.Current.GetInstance<ContentDataInterceptorHandler>())
        {
        }

        public DebugContentDataInterceptor(ContentDataInterceptorHandler contentDataInterceptorHandler)
        {
            _contentDataInterceptorHandler = contentDataInterceptorHandler;
        }

        public override void Intercept(IInvocation invocation)
        {
            var getProperty = invocation.ExtractPropertyInfoByGetMethod();
            if (getProperty != null)
            {
                System.Diagnostics.Debug.WriteLine("INTERCEPT: " + getProperty.Name);
            }

            var propertiesInterceptor = ServiceLocator.Current.GetInstance<EPiPropertiesInterceptor>();

            propertiesInterceptor.Intercept(invocation);

            if (invocation.ReturnValue == null)
            {
                base.Intercept(invocation);
            }
        }

        protected override void HandleGetterAccessor(IInvocation invocation, PropertyData propertyData)
        {
            IPropertyDataInterceptor propertyInterceptor = _contentDataInterceptorHandler.GetPropertyInterceptor(propertyData.GetType());
            if (propertyInterceptor != null)
            {
                invocation.ReturnValue = propertyInterceptor.GetValue(propertyData, invocation.Method.ReturnType);
            }
            else if ((propertyData.Value == null) && invocation.Method.ReturnType.IsValueType)
            {
                invocation.ReturnValue = Activator.CreateInstance(invocation.Method.ReturnType);
            }
            else
            {
                invocation.ReturnValue = propertyData.Value;
            }
        }

        protected override void HandleSetterAccessor(IInvocation invocation, PropertyData propertyData)
        {
            IPropertyDataInterceptor propertyInterceptor = _contentDataInterceptorHandler.GetPropertyInterceptor(propertyData.GetType());
            if (propertyInterceptor != null)
            {
                Type parameterType = invocation.Method.GetParameters()[0].ParameterType;
                propertyInterceptor.SetValue(propertyData, parameterType, invocation.Arguments[0]);
            }
            else
            {
                propertyData.Value = invocation.Arguments[0];
            }
        }
    }

    internal static class TypeExtensions
    {
        public static IEnumerable<PropertyInfo> InterceptableProperties(this Type t)
        {
            if (!typeof(IContentData).IsAssignableFrom(t))
            {
                return Enumerable.Empty<PropertyInfo>();
            }
            return (from p in t.GetProperties()
                    where p.IsAutoVirtualPublic()
                    select p);
        }

        public static bool IsAutoGenerated(this PropertyInfo p)
        {
            return (bool)((((p.GetGetMethod() != null) && (p.GetSetMethod() != null)) && (p.GetGetMethod().GetCustomAttributes(typeof(CompilerGeneratedAttribute), true).Length == 1)) && ((bool)(p.GetSetMethod().GetCustomAttributes(typeof(CompilerGeneratedAttribute), true).Length == 1)));
        }

        public static bool IsAutoVirtualPublic(this PropertyInfo self)
        {
            Validator.ThrowIfNull("self", self);
            if (!self.IsAutoGenerated())
            {
                return false;
            }
            return Enumerable.All<MethodInfo>(self.GetAccessors(true), (Func<MethodInfo, bool>)(m => ((bool)(((Enumerable.Any<object>(m.GetCustomAttributes(typeof(CompilerGeneratedAttribute), false)) && ((m.DeclaringType == m.ReflectedType) || (((m.DeclaringType != typeof(ContentData)) && (m.DeclaringType != typeof(BlockData))) && (m.DeclaringType != typeof(PageData))))) && m.IsVirtual) && m.IsPublic))));
        }

        public static bool IsInterceptableType(this Type t)
        {
            return (bool)(Enumerable.Count<PropertyInfo>(t.InterceptableProperties()) > 0);
        }
    }
}